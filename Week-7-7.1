Develop C++ programs to demonstrate different forms of inheritance?
1. Single Inheritance: One derived class inherits from one base class. 
Syntax: 
class Base { // members }; 
class Derived : 
public Base { // inherits Base }; 
 
 
Program:. 
#include<iostream> 
using namespace std; 
class vehicle{ 
public: 
vehicle(){ 
cout<<"This is a vehicle"<<endl;} 
 
 
}; 
class car:public vehicle 
{
public: 
car(){ 
cout<<"This vehicle is a car"<<endl; 
} 
}; 
int main() 
{ 
car obj; 
return 0; 
}
2. Multiple Inheritance: One derived class inherits from more than one base class. 
Syntax: 
class Base1 { // members }; 
class Base2 { // members }; 
class Derived : 
public Base1, public Base2 { // inherits both Base1 and Base2 }; 
 
 
Program: 
#include<iostream> 
using namespace std; 
class landvehicle{ 
public: 
landvehicle(){ 
cout<<"This is a land vehicle"<<endl; 
} 
}; 
class watervehicle{ 
public: 
watervehicle(){ 
cout<<"This is a water vehicle"<<endl; 
} 
}; 
class amphibiousvehicle:public watervehicle,public landvehicle{ 
public: 
amphibiousvehicle(){ 
cout<<"This is an both land and water vehicle"<<endl; 
} 
}; 
int main(){ 
amphibiousvehicle obj; 
return 0; 
} 
 
3. Multilevel Inheritance: A class is derived from a class which is also derived from another 
class. 
Syntax: 
class Base { // members }; 
class Intermediate : public Base { // inherits Base }; 
class Derived : public Intermediate { // inherits Intermediate (and indirectly Base) }; 
 
 
Program: 
#include<iostream> 
using namespace std; 
class vehicle{ 
public: 
vehicle(){ 
cout<<"This is a vehicle"<<endl;} 
 
 
}; 
class fourwheeler:public vehicle{ 
public: 
fourwheeler(){ 
cout<<"4 wheeler vehicles"<<endl; 
} 
}; 
class car:public fourwheeler{ 
public: 
car(){ 
cout<<"This 4 wheeler vehicle is a car"; 
 
 
} 
}; 
int main(){
 
3. Multilevel Inheritance: A class is derived from a class which is also derived from another 
class. 
Syntax: 
class Base { // members }; 
class Intermediate : public Base { // inherits Base }; 
class Derived : public Intermediate { // inherits Intermediate (and indirectly Base) }; 
 
 
Program: 
#include<iostream> 
using namespace std; 
class vehicle{ 
public: 
vehicle(){ 
cout<<"This is a vehicle"<<endl;} 
 
 
}; 
class fourwheeler:public vehicle{ 
public: 
fourwheeler(){ 
cout<<"4 wheeler vehicles"<<endl; 
} 
}; 
class car:public fourwheeler{ 
public: 
car(){ 
cout<<"This 4 wheeler vehicle is a car"; 
 
 
} 
}; 
int main(){
 
4. Hierarchical Inheritance: Multiple classes inherit from a single base class. 
Syntax: 
class Base { // members }; 
class Derived1 : public Base { // inherits Base }; 
class Derived2 : public Base { // inherits Base }; 
Program: 
#include<iostream> 
using namespace std; 
class vehicle{ 
public: 
vehicle(){ 
cout<<"This is a vehicle"<< endl; 
 
 
} 
}; 
class car : public vehicle{ 
public: 
car(){ 
cout<<"This vehicle is a car"<< endl; 
 
 
} 
}; 
class bus : public vehicle{ 
public: 
bus(){ 
 
 
cout<<"This vehicle is bus"<< endl; 
} 
}; 
int main(){ 
car obj1; 
bus obj2; 
}
 
5. Hybrid Inheritance: A combination of two or more types of inheritance. 
Syntax: 
class A { // base class }; 
class B : public A { // inherits A }; 
class C : public A { // inherits A }; 
class D : public B, public C { // inherits both B and C (diamond problem may occur) }; 
 
 
Program:. 
#include<iostream> 
using namespace std; 
class vehicle{ 
public: 
vehicle(){ 
cout<<"this is a vehicle"<<endl; 
 
 
} 
}; 
class fare{ 
public: 
fare(){ 
cout<<"fare of a vehicle"<<endl; 
 
 
} 
}; 
class car:public vehicle{ 
public: 
car(){ 
cout<<"this vehicle is a car"<<endl; 
 
 
}
 
}; 
class bus:public vehicle,public fare{ 
public: 
bus(){ 
cout<<"this vehicle is a bus with fare"<<endl; 
 
 
} 
}; 
int main() 
{ 
bus obj2; 
 
 
}
